import math
from functools import reduce

def lcm(x,y):
    return (x*y)//math.gcd(x,y)

def lcmm(*args):
    return reduce(lcm,args)

def doTheThing(Angles):
    columns = len(Angles) #find out how many columns [Angles] has
    rows = len(Angles[0]) #find out how many rows [Angles] has
    evenAngles = [[Angles[n][m] if Angles[n][0]%2 == 0 else Angles[n][m]*2 for m in range((rows-1))] for n in range((columns))] #get even angles
    denom = [evenAngles[n][1] for n in range(columns)]#get denominators
    k = lcmm(*denom) # find least common multiple of denominators and this = k
    kAngles = [[(evenAngles[n][m])*k//evenAngles[n][1] for m in range(rows-1)] for n in range(columns)]# find second row in each column /k, multiply row 1 and 2 by result ==[kAngles]
    defic = [kAngles[m][0] - 2*k for m in range(columns)]# for every column in [kAngles](numerator(eA) - 2demoninator(eA)) == [frompi]
    counter = columns - 1
    kdiffZeroes = []
    while counter >= 0:
        subcounter = Angles[counter][2]
        while subcounter > 0:
            kdiffZeroes.append((defic[counter])/2)
            subcounter = subcounter - 1
        counter = counter - 1

    abelianOrders = [(evenAngles[m][0] - 2)/2 for m in range(columns)] #find zeroes on abeaalian
    abealianMult = [k//evenAngles[m][1] for m in range(columns)]
    counter2 = columns -1
    ablelianZeros = []
    while counter2 >= 0:
        subcounter2 = Angles[counter2][2]*abealianMult[counter2]
        while subcounter2 > 0:
            ablelianZeros.append(abelianOrders[counter2])
            subcounter2 = subcounter2 - 1
        counter2 = counter2 - 1
    genus = ((sum(ablelianZeros)+2)/2)
    print("H_[", k, "],",kdiffZeroes, "H",ablelianZeros,",[",genus,"]")

johnsonsolids = [
    [[4,3,1],[7,6,4]],
    [[5,3,1],[19,15,5]],
    [[5,3,3],[3,2,6]],
    [[11,6,4],[19,12,8]],
    [[13,12,4],[49,30,10]],
    [[28,15,10],[26,15,10]],
    [[5,3,6],[1,1,1]],
    [[4,3,1],[5,3,4],[3,2,4]],
    [[5,3,1],[5,3,5],[8,5,5]],
    [[4,3,1],[5,3,4],[7,6,4]],
    [[5,3,1],[5,3,5],[19,15,5]],
    [[1,1,2],[4,3,3]],
    [[5,3,2],[4,3,5]],
    [[1,1,2],[5,3,6]],
    [[4,3,2],[7,6,8]],
    [[5,3,2],[5,3,10]],
    [[4,3,2],[5,3,8]],
    [[5,3,3],[11,6,6],[5,3,6]],
    [[11,6,4],[11,6,8],[7,4,8]],
    [[29,15,5],[11,6,10],[9,5,10]],
    [[28,15,5],[28,15,5],[29,15,10],[9,5,10]],
    [[5,3,3],[11,6,6],[5,3,6]],
    [[11,6,4],[11,6,8],[7,4,8]],
    [[9,5,10],[11,6,10],[29,15,5]],
    [[9,5,10],[29,15,10],[28,15,5]],
    [[5,2,8]],
    [[5,3,6],[5,3,6]],
    [[11,6,8],[5,3,8]],
    [[11,6,4],[5,3,12]],
    [[29,15,10],[5,3,10]],
    [[29,15,10],[5,3,10]],
    [[29,15,5],[53,30,10],[28,15,10],[28,15,5]],
    [[29,15,5],[53,30,10],[19,15,10],[19,15,5]],
    [[28,15,10],[28,15,20],[28,15,10]],
    [[11,6,12],[5,3,6]],
    [[5,3,6],[11,6,12]],
    [[11,6,16],[11,6,8]],
    [[29,15,10],[11,6,20]],
    [[29,15,10],[11,6,20]],
    [[29,15,5],[11,6,10],[29,15,10],[28,15,10],[28,15,5]],
    [[29,15,5],[11,6,10],[29,15,10],[28,15,10],[28,15,5]],
    [[28,15,5],[28,15,10],[29,15,10],[29,15,10],[28,15,10],[28,15,5]],
    [[28,15,5],[28,15,10],[29,15,10],[29,15,10],[28,15,5]],
    [[5,3,3],[11,6,6],[11,6,6],[5,3,3]],
    [[11,6,4],[11,6,8],[11,6,8],[11,6,4]],
    [[29,15,5],[11,6,8],[11,6,8],[29,15,6]],
    [[28,15,5],[85,15,10],[29,15,10],[11,6,10],[29,15,5]],
    [[28,15,5],[28,15,10],[29,15,5],[29,15,5],[28,15,5]],
    [[4,3,2],[3,2,4],[4,3,1]],
    [[3,2,4],[5,3,2],[4,3,2]],
    [[5,3,2],[4,3,2],[5,3,4],[4,3,1]],
    [[8,5,3],[8,5,3],[53,30,4],[4,3,1]],
    [[4,3,1],[53,30,4],[8,5,2],[53,30,4],[4,3,1]],
    [[4,3,1],[11,6,4],[5,3,4],[5,3,4]],
    [[4,3,1],[11,6,4],[5,3,4],[11,6,4],[4,3,1]],
    [[4,3,1],[11,6,4],[11,6,4],[5,3,4]],
    [[4,3,3],[11,6,12]],
    [[5,3,1],[28,15,6],[9,5,14]],
    [[4,3,2],[28,15,10],[9,5,10]],
    [[5,3,2],[28,15,10],[9,5,10]],
    [[5,3,3],[28,15,10],[9,5,10]],
    [[17,10,2],[8,5,6],[5,3,2]],
    [[23,15,3],[23,15,3],[8,5,3]],
    [[1,1,1],[28,15,3],[23,15,3],[8,5,3]],
    [[5,3,3],[11,6,6],[23,15,3],[23,15,3]],
    [[9,3,8],[9,3,4],[3,2,8],[11,6,4]],
    [[9,3,12],[3,2,12],[11,6,8]],
    [[29,15,35],[59,30,10],[29,15,5]],
    [[29,15,10],[59,30,20],[29,15,40]],
    [[29,15,10],[59,30,20],[29,15,40]],
    [[29,15,30],[29,15,15],[59,30,30]],
    [[29,15,60]],
    [[29,15,60]],
    [[29,15,60]],
    [[29,15,60]],
    [[19,10,10],[29,15,45]],
    [[19,10,10],[29,15,45]],
    [[19,10,10],[29,15,45]],
    [[19,10,10],[29,15,45]],
    [[19,10,20],[29,15,30]],
    [[19,10,20],[29,15,30]],
    [[19,10,20],[29,15,30]],
    [[19,10,30],[29,15,15]],
    [[5,3,2],[4,3,6]],
    [[11,6,8],[5,3,8]],
    [[3,2,4],[5,3,5],[4,3,1]],
    [[5,3,5],[4,3,2],[11,6,2],[3,2,2]],
    [[11,16,4],[2,3,2],[4,3,4],[5,3,4]],
    [[7,3,4],[5,3,6],[11,6,4]],
    [[5,3,4],[11,6,8],[7,6,4]],
    [[28,15,6],[53,30,8]],
    [[11,6,6],[8,5,3],[53,30,6],[28,15,3]]
    ]

for i in range(len(johnsonsolids)):
    print("J",i+1,":")
    doTheThing(johnsonsolids[i])
